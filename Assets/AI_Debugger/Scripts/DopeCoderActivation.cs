//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/AI_Debugger/Resources/DopeCoderActivation.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DopeCoderActivation: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DopeCoderActivation()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DopeCoderActivation"",
    ""maps"": [
        {
            ""name"": ""dopeCoderActionMap"",
            ""id"": ""6345768e-0abd-4cdd-90f1-6cb0d4592097"",
            ""actions"": [
                {
                    ""name"": ""activateVR"",
                    ""type"": ""Button"",
                    ""id"": ""46de2cca-2f46-47f4-bba8-5241ef8ff15c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""activatePC"",
                    ""type"": ""Button"",
                    ""id"": ""a4e8d211-13b9-46b6-b2f9-0a1cbe2d2a81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e02f73b-01e0-4a3a-8c87-c2927b86acde"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activateVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3149c772-610f-4840-8ebd-fc8a6270c25d"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activateVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efec0c26-055e-428d-bd03-dc1e1c190606"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activatePC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // dopeCoderActionMap
        m_dopeCoderActionMap = asset.FindActionMap("dopeCoderActionMap", throwIfNotFound: true);
        m_dopeCoderActionMap_activateVR = m_dopeCoderActionMap.FindAction("activateVR", throwIfNotFound: true);
        m_dopeCoderActionMap_activatePC = m_dopeCoderActionMap.FindAction("activatePC", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // dopeCoderActionMap
    private readonly InputActionMap m_dopeCoderActionMap;
    private List<IDopeCoderActionMapActions> m_DopeCoderActionMapActionsCallbackInterfaces = new List<IDopeCoderActionMapActions>();
    private readonly InputAction m_dopeCoderActionMap_activateVR;
    private readonly InputAction m_dopeCoderActionMap_activatePC;
    public struct DopeCoderActionMapActions
    {
        private @DopeCoderActivation m_Wrapper;
        public DopeCoderActionMapActions(@DopeCoderActivation wrapper) { m_Wrapper = wrapper; }
        public InputAction @activateVR => m_Wrapper.m_dopeCoderActionMap_activateVR;
        public InputAction @activatePC => m_Wrapper.m_dopeCoderActionMap_activatePC;
        public InputActionMap Get() { return m_Wrapper.m_dopeCoderActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DopeCoderActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDopeCoderActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DopeCoderActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DopeCoderActionMapActionsCallbackInterfaces.Add(instance);
            @activateVR.started += instance.OnActivateVR;
            @activateVR.performed += instance.OnActivateVR;
            @activateVR.canceled += instance.OnActivateVR;
            @activatePC.started += instance.OnActivatePC;
            @activatePC.performed += instance.OnActivatePC;
            @activatePC.canceled += instance.OnActivatePC;
        }

        private void UnregisterCallbacks(IDopeCoderActionMapActions instance)
        {
            @activateVR.started -= instance.OnActivateVR;
            @activateVR.performed -= instance.OnActivateVR;
            @activateVR.canceled -= instance.OnActivateVR;
            @activatePC.started -= instance.OnActivatePC;
            @activatePC.performed -= instance.OnActivatePC;
            @activatePC.canceled -= instance.OnActivatePC;
        }

        public void RemoveCallbacks(IDopeCoderActionMapActions instance)
        {
            if (m_Wrapper.m_DopeCoderActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDopeCoderActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DopeCoderActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DopeCoderActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DopeCoderActionMapActions @dopeCoderActionMap => new DopeCoderActionMapActions(this);
    public interface IDopeCoderActionMapActions
    {
        void OnActivateVR(InputAction.CallbackContext context);
        void OnActivatePC(InputAction.CallbackContext context);
    }
}
