{"content":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing UnityEditor;\nusing UnityEngine;\n\npublic class AssistantChatWindow : EditorWindow {\n    private string inputText = \"\";\n    private Vector2 scrollPosition;\n    private OpenAIChatInterface openAIChatInterface;\n\n    private static List<ChatEntry> chatLog = new List<ChatEntry>(); // Static to persist within session\n    private Texture2D fileIcon;\n    private ConsoleLogListener consoleLogListener;\n\n    // Enum for the modes\n    private enum Mode {\n        AssistantMode,\n        ChatMode\n    }\n\n    private Mode currentMode = Mode.AssistantMode;\n\n    // Dropdown for mode selection\n    private string[] modes = { \"Assistant Mode\", \"Chat Mode\" };\n    private int selectedModeIndex = 0;\n\n    [MenuItem(\"Tools/DopeCoder/Assistant Chat\")]\n    public static void ShowWindow() {\n        GetWindow<AssistantChatWindow>(\"Assistant Chat\");\n    }\n\n    private async void OnEnable() {\n        fileIcon = EditorGUIUtility.IconContent(\"d_TextAsset Icon\").image as Texture2D;\n        consoleLogListener = new ConsoleLogListener();\n        openAIChatInterface = new OpenAIChatInterface(EditorPrefs.GetString(\"AssistantId\", \"\"));\n\n        await openAIChatInterface.InitializeSessionAsync();\n    }\n\n    private void OnDisable() {\n        consoleLogListener = null; // Dispose the listener to stop collecting logs\n    }\n\n    private void OnGUI() {\n        GUILayout.BeginVertical();\n\n        // Dropdown for selecting mode\n        GUILayout.BeginHorizontal();\n        GUILayout.Label(\"Mode: \", GUILayout.Width(50));\n        selectedModeIndex = EditorGUILayout.Popup(selectedModeIndex, modes, GUILayout.Width(200));\n        currentMode = (Mode)selectedModeIndex; // Update currentMode based on dropdown selection\n        GUILayout.EndHorizontal();\n\n        GUILayout.Label(\"Assistant Chat\", EditorStyles.boldLabel);\n        scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.Height(400));\n        foreach (var entry in chatLog) {\n            EditorGUILayout.BeginHorizontal();\n            EditorGUILayout.LabelField(entry.User, EditorStyles.boldLabel, GUILayout.Width(100));\n\n            if (entry.IsFile) {\n                if (GUILayout.Button(new GUIContent(Path.GetFileName(entry.FilePath), fileIcon), GUILayout.Width(200), GUILayout.Height(20))) {\n                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo(entry.FilePath) { UseShellExecute = true });\n                }\n            } else {\n                // Make the text selectable\n                EditorGUILayout.SelectableLabel(entry.Message, EditorStyles.wordWrappedLabel, GUILayout.Height(EditorGUIUtility.singleLineHeight * entry.Message.Split('\\n').Length + 4));\n            }\n\n            EditorGUILayout.EndHorizontal();\n        }\n        EditorGUILayout.EndScrollView();\n\n        GUILayout.Space(10);\n        GUILayout.BeginHorizontal();\n        inputText = EditorGUILayout.TextField(inputText, GUILayout.ExpandWidth(true));\n\n        if (GUILayout.Button(\"Send\", GUILayout.Width(80))) {\n            ProcessInput(inputText);\n            inputText = \"\"; // Clear input after sending\n        }\n        GUILayout.EndHorizontal();\n\n        GUILayout.Space(10);\n        GUILayout.BeginHorizontal();\n        if (GUILayout.Button(\"Clear Chat Log\", GUILayout.Width(100))) {\n            chatLog.Clear();\n        }\n        if (GUILayout.Button(\"Export Logs as JSON\", GUILayout.Width(150))) {\n            ExportLogsAsJson();\n        }\n        GUILayout.EndHorizontal();\n\n        GUILayout.Space(10);\n        Rect dropArea = GUILayoutUtility.GetRect(0.0f, 50.0f, GUILayout.ExpandWidth(true));\n        GUI.Box(dropArea, \"Drag and Drop Files Here\", EditorStyles.helpBox);\n\n        HandleDragAndDrop(dropArea);\n\n        GUILayout.EndVertical();\n    }\n\n    private async void ProcessInput(string input) {\n        if (string.IsNullOrEmpty(input)) return;\n\n        // Add user message to chat log\n        chatLog.Add(new ChatEntry { User = \"You\", Message = input, IsFile = false });\n\n        // Depending on the current mode, modify how the message is handled\n        string response = \"\";\n        if (currentMode == Mode.AssistantMode) {\n            string jsonInput = JsonConvert.SerializeObject(new { type = \"question\", content = input });\n            response = await openAIChatInterface.SendMessageAsync(jsonInput);\n        } else if (currentMode == Mode.ChatMode) {\n            response = await openAIChatInterface.SendChatMessage(input);\n        }\n\n        // Add response to chat log\n        chatLog.Add(new ChatEntry { User = \"Assistant\", Message = response, IsFile = false });\n\n        // Refresh the window to display new messages\n        Repaint();\n    }\n\n    private void ExportLogsAsJson() {\n        if (consoleLogListener == null) {\n            Debug.LogError(\"Console log listener is not initialized.\");\n            return;\n        }\n\n        string tempPath = consoleLogListener.ExportLogsAsJson();\n        if (!string.IsNullOrEmpty(tempPath)) {\n            chatLog.Add(new ChatEntry { User = \"System\", Message = \"Exported JSON log\", IsFile = true, FilePath = tempPath });\n            Debug.Log($\"Logs exported to: {tempPath}\");\n        } else {\n            chatLog.Add(new ChatEntry { User = \"System\", Message = \"No logs to export\", IsFile = false });\n            Debug.LogWarning(\"No logs to export.\");\n        }\n\n        Repaint();\n    }\n\n    private void HandleDragAndDrop(Rect dropArea) {\n        Event evt = Event.current;\n\n        switch (evt.type) {\n            case EventType.DragUpdated:\n            case EventType.DragPerform:\n                if (!dropArea.Contains(evt.mousePosition))\n                    return;\n\n                DragAndDrop.visualMode = DragAndDropVisualMode.Copy;\n\n                if (evt.type == EventType.DragPerform) {\n                    DragAndDrop.AcceptDrag();\n\n                    foreach (var draggedObject in DragAndDrop.objectReferences) {\n                        string assetPath = AssetDatabase.GetAssetPath(draggedObject);\n                        if (!string.IsNullOrEmpty(assetPath)) {\n                            string tempPath = Path.Combine(Path.GetTempPath(), Path.GetFileName(assetPath));\n                            File.Copy(assetPath, tempPath, true);\n                            openAIChatInterface.SendChatFile(assetPath);\n                            chatLog.Add(new ChatEntry { User = \"You\", Message = \"Uploaded a file\", IsFile = true, FilePath = tempPath });\n                        }\n                    }\n                    Repaint();\n                }\n                break;\n        }\n    }\n}\n\npublic class ChatEntry {\n    public string User { get; set; }\n    public string Message { get; set; }\n    public bool IsFile { get; set; }\n    public string FilePath { get; set; }\n}\n\n\npublic class ConsoleLogListener {\n    private List<LogMessage> logMessages = new List<LogMessage>();\n    private string tempFilePath;\n\n    public ConsoleLogListener() {\n        Application.logMessageReceived += HandleLog;\n        tempFilePath = Path.Combine(Path.GetTempPath(), \"console_logs.json\");\n        UpdateJsonFile();\n    }\n\n    ~ConsoleLogListener() {\n        Application.logMessageReceived -= HandleLog;\n    }\n\n    private void HandleLog(string logString, string stackTrace, LogType type) {\n        logMessages.Add(new LogMessage {\n            Message = logString,\n            StackTrace = stackTrace,\n            Type = type.ToString()\n        });\n\n        // Update the temporary JSON file each time a new log is added\n        UpdateJsonFile();\n    }\n\n    private void UpdateJsonFile() {\n        string json = JsonConvert.SerializeObject(logMessages, Formatting.Indented);\n        File.WriteAllText(tempFilePath, json);\n    }\n\n    public string ExportLogsAsJson() {\n        if (logMessages.Count == 0) {\n            Debug.LogWarning(\"No logs to export.\");\n            return null;\n        }\n\n        // Return the path of the temporary JSON file\n        return tempFilePath;\n    }\n\n    public class LogMessage {\n        public string Message { get; set; }\n        public string StackTrace { get; set; }\n        public string Type { get; set; }\n    }\n}","fileName":"AssistantChatWindow.cs"}
